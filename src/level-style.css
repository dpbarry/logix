:root {
  --successPrompt: "Next level...";
  --rows: 2;
  --cols: 2;
  
  --fontFactor: 1;
  --widthFactor: 1;
  --heightFactor: 1;
  --widthSubtrahend: 0;
  --heightSubtrahend: 0;
  
  --axisFontSize: clamp(0.85rem, 3.5vh, 2rem);
  --gridGap: 7px;
  --gridPadding: 20px;
  --gridBorderWidth: 4px;
  --gridOffset: 1.5vh;
  --maxGridWidth: calc(min(38vh, 68vw) + 2 * var(--gridPadding) + 2 * var(--gridBorderWidth));
  --gridWidth: calc(var(--widthFactor) * min(38vh, 68vw) - (1 - var(--widthFactor)) * var(--gridGap));
  --gridHeight: calc(var(--heightFactor) * min(38vh, 68vw) - (1 - var(--heightFactor)) * var(--gridGap));
  
  --fullGridWidth: calc(var(--gridWidth) + 2 * var(--gridPadding) + 2 * var(--gridBorderWidth));
  --fullGridHeight: calc(var(--gridHeight) + 2 * var(--gridPadding) + 2 * var(--gridBorderWidth));

  --cellFontSize: clamp(1rem, calc(9vh * var(--fontFactor)), calc(6rem * var(--fontFactor)));

  --longestProposition: 400px;
  --domainButtonHeight: 56px;
}

@property --lightBlue {
  syntax: '<color>';
  initial-value: rgb(110,155,250,.28);
  inherits: false;
}

@property --darkBlue {
  syntax: '<color>';
  initial-value: rgb(110,155,250,.51);
  inherits: false;
}

#domain.correct {
  justify-content: right;
  justify-content: 
    
    transition: gap 0.6s, bottom 0.6s;
  gap: 0px;
  bottom: calc(0.15 * var(--domainButtonHeight));

  overflow: visible;

  button:not(:first-child) {
    transition: width 0.8s ease, min-width 0.8s; bottom 0.35s ease;

    will-change: width, min-width, bottom;

    width: 0;
    bottom: -8px;
    min-width: 0px;

    &::before {transition: opacity 0.1s; opacity: 0;}
    p {
      transition: opacity 0.35s;
      opacity: 0;
    }

    pointer-events: none;
  }


  button:first-child {
    --lightBlue: light-dark(rgb(110,155,250,.28), rgb(120,165,255,.5));
    --darkBlue: light-dark(rgb(110,155,250,.51), rgb(120,165,255,.73));
    height: var(--domainButtonHeight);
    width: 100%;
    border: 1px solid light-dark(#000, #444);
    background: repeating-linear-gradient(45deg, var(--lightBlue),  var(--darkBlue) , var(--lightBlue) 600px);
    background-size: calc(600px/sin(45deg)) 100%;
    animation: glow 2.5s linear infinite reverse;
    transition: --lightBlue 0.25s, --darkBlue 0.25s, box-shadow 0.25s;

    overflow: hidden;
    
    &>.ripple {
      background:  light-dark(rgb(110,155,250), rgb(70,115,210));
      transition: all .6s;
      &.run {
        opacity: 1 !important;
        transform: scale(400);
      }
    }

    p {
      transition: font-size 0.1s, opacity 0.1s;
      font-size: 0;
      opacity: 0;
    }
  }

  button:first-child:focus {
    --lightBlue: light-dark(rgb(110,155,250,.5), rgb(120,165,255,.75));
    --darkBlue: light-dark(rgb(110,155,250,.73), rgb(120,165,255, .98));
    
  }

  button:first-child.activated {
    transition: --lightBlue 0.25s, --darkBlue 0.25s, box-shadow 0.25s, background 0.4s;
    background-color: light-dark(rgb(110,155,250), rgb(70,115,210));
    &::before {
      color: white;
    }
  }
  button:first-child::before {
    content: var(--successPrompt);
    background: transparent;
    font-family: "Source Serif 4";
    animation: spring 0.8s ease-out forwards;
    font-weight: 375;
    font-style: italic;
    height: 100%;
    width: 100%;
    position: absolute;
    transform: translate(-50%, -50%);
    top: 50%; left: 50%;
    line-height: 3.25rem;
    transition: color 0.21s;

    filter: unset !important;

  }
}



@media (hover: hover) and (pointer: fine) {
  #domain.correct button:first-child:hover {
    --lightBlue: light-dark(rgb(110,155,250,.5), rgb(120,165,255,.75));
    --darkBlue: light-dark(rgb(110,155,250,.73), rgb(120,165,255, .98));
  }
}

@keyframes glow {
  0% {
    background-position: calc(600px/sin(45deg)) 0;
  }
}

@keyframes spring {
  0% { font-size: 0rem; }
  100% { font-size: 2.25rem; }
}

#wrap_home_level {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  position: relative;
  gap: 3px;
  top: clamp(0.5rem, 1.75vmin, 1rem); 
  left: clamp(0.5rem, 1.75vmin, 1rem); 
  width: min-content;
  height: 37px;
  cursor: pointer;
  margin-bottom: 2px;
  color: var(--baseColor);
  transition: opacity 0.05s;
}

#home {
  background-image: url("../assets/HOME.svg");
  background-size: 100% 100%;
  display: inline-block;
  min-height: 37px;
  min-width: 37px;
  border: 0;
  flex-basis: 100%;
  background-color: transparent;
  filter: var(--hueShiftIcons);
  cursor: pointer;
}

@media (hover: hover) and (pointer: fine) {
  #wrap_home_level:hover {
    opacity: 0.65;
  }
}

#wrap_home_level:has(~ #menu  #menu_checkbox:checked) #level, #wrap_home_level:has(~ #menu #menu_checkbox:checked) #difficulty {
  opacity: 1;
}

#level {
  font-family: "computer modern serif";
  font-weight: lighter;
  font-size: 1.5rem;

  position: relative;
  bottom: 2px;
  width: min-content;
  margin: 0;
  opacity: 0;
  transition: opacity 0.3s;
}
#difficulty {
  font-family: "source serif 4";
  font-style: italic;
  font-weight: 365;
  font-size: 0.87rem;
  display: block;
  max-height: 2px;
  position: relative;
  bottom: 14.5px;
  margin: 0;
  width: 100%;
  opacity: 0;
  transition: opacity 0.3s;
}
#info_dialog {
  height: min-content;
  min-height: 30vh;
  max-height: 70vh;
  h1 {margin-bottom: 5px;}
  padding-bottom: 20px;
}
#level_info {
  padding-left: 2vw;
  padding-right: 2vw;
  display:flex;

  max-height: calc(70vh - 20px);
  height: 100%;
  box-sizing: border-box;
  
  flex-wrap: wrap;
  gap: 10px;
  scrollbar-width: none;
    
  .mspace { margin-right: 0.18em !important; }
  .entrystyle + span {margin-left: -0.1em; }
  &.overflowing {
    padding-bottom: 20px;
  }
  p {
    margin: 0;
    font-weight: 350;
    font-size: 1.15rem;
    flex-basis:100%;
    text-align: justify;
  }

  hr { width: 100%; }

  p.big {
    font-size: 1.35rem;
  }
  p.italic {
    font-style: italic;
  }
  p.center {
    text-align: center;
  }
  p.half {
    flex-basis: 50%;
  }
  p.emph {
    font-weight: 600;
  }
  img {
    pointer-events: none;
    display: inline;
    max-width: 40px;
    max-height: 40px;
    zoom: 0.83;
  }
}

#menu {
  position: absolute;

  display: flex;

  z-index: 2;
  
  top: clamp(0.5rem, 1.75vmin, 1rem); 
  right: clamp(0.5rem, 1.5vmin, 1rem); 
  /* Align #chevron */
  text-align: center;

  #menu_checkbox {
    display: block;
    width: 45px;
    height: 45px;

    position: absolute;
    top: -3px;
    left: -20px;

    cursor: pointer;

    opacity: 0;
    z-index: 1;
  }

  @media (hover: hover) and (pointer: fine) {
    #menu_checkbox:hover + #chevron::before {
      opacity: 0.65;
    }
  }


  #chevron {
    position: relative;
    top: 4px;
    margin-right: 14px;

    height: 39px;

    align-content: center;
  }

  #chevron::before {
    content: "";

    display: inline-block;
    height: 18px;
    width: 18px;

    border-bottom: 3px solid var(--baseColor);
    border-right: 3px solid var(--baseColor);
    border-radius: 1px;
    opacity: 1;

    rotate: 135deg;
    transition: rotate 0.3s cubic-bezier(0.77,0.2,0.05,1.0), height 0.2s, width 0.2s, opacity 0.05s;
  }

  #menu_checkbox:checked ~ #chevron:before {
    rotate: -45deg;
  }

  ul {
    width: 100%;
    margin: 0;
    padding: 0;

    list-style-type: none;
    display: flex;
    flex-direction: row;
    

    transform: translateX(calc(clamp(0.5rem, 1.5vmin, 1rem) + 200px));
    will-change: transform;
    transition: transform 0.3s cubic-bezier(0.77,0.2,0.05,1.0);
  }

  
  ul:has(#menu_checkbox:checked)  {
    transform: none;

    #menu_checkbox {
      width: 30px;
      left: -9px;
    }
    #chevron::before {
      height: 12px;
      width: 12px;
    }
  }

  .dialog_button {
    height: 39px;
    width: 100%;
    margin-right: 15px;

    position: relative;
  }

  .dialog_button:last-of-type {
    margin-right: 0;
  }


  #info { content: url("../assets/INFO.svg"); }
  #dictionary { content: url("../assets/DICTIONARY.svg"); }
  #notes { content: url("../assets/NOTES.svg"); }
  #settings { content: url("../assets/SETTINGS.svg"); }
}



#wrap_main {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}



#wrap_axis_grid {
  display: grid;

  grid-template-columns:  var(--axisFontSize) var(--fullGridWidth);
  grid-template-rows: var(--fullGridHeight) var(--axisFontSize);

  justify-content: center;
  align-content: center;

  width: 100%;

  position: relative;
  
}


#y-axis, #x-axis {
  display: flex;
  font-family: "Computer Modern Serif";

  span {
    font-size: var(--axisFontSize);
    width: 100%;
    align-content: center;
    text-align: center;
    height: 100%;
    cursor: default;
    z-index: 1;
    font-style: italic;

    color: var(--baseColor);
    box-sizing: border-box;
  }
}
#y-axis {
  flex-direction: column;

  gap: var(--gridGap);

  position: relative;
  top: calc(var(--gridPadding) + 4px);
  right: 3px;

  width: min-content;
  height: calc(var(--fullGridHeight) - 2 * var(--gridPadding) - 2 * var(--gridBorderWidth));


}

#x-axis {
  flex-direction: row;
  
  position: relative;
  left: calc(var(--axisFontSize) + var(--gridBorderWidth) + var(--gridPadding) - 4px);

  gap: var(--gridGap);

  height: min-content;
  width: calc(var(--fullGridWidth) - 2 * var(--gridPadding) - 2 * var(--gridBorderWidth));

}


#grid::before {
  content: "";
  position: absolute;
  background-color: var(--bgColor);
  top: -20%;
  width: 77.5%;
  height: 140%;
}


#grid {
  align-self: center;
  grid-gap: var(--gridGap);

  padding: var(--gridPadding);
  position: relative;

  display: grid;
  align-items: center;
  align-content: center;
  justify-items: center;
  box-sizing: content-box;
  
  border: var(--gridBorderWidth) solid var(--bracketColor, black);
  border-radius: 2px;
  
  grid-template-columns: repeat(var(--cols), 1fr);
  grid-template-rows: repeat(var(--rows), 1fr);

  width:  var(--gridWidth);
  height: var(--gridHeight);

  
  span {
    font-family: "computer modern serif";
    text-align: center;
    outline: 2px solid transparent; /* For crosshairs */
    transition: background-color .12s ease-in-out, border .12s ease-in-out, outline-color 0.2s ease, color 0.12s ease-in-out, transform 0.8s ease;
    
    width: 100%;
    height: 100%;
    
    border-radius: 2px;

    font-size: var(--cellFontSize);
    color: var(--baseColor);
    
    z-index: 1;

    box-sizing: border-box;

    display: flex;

    justify-content: center;
    align-items: center;
    
    cursor: pointer;

    &:has(.ripple) {
      transition: background-color .21s ease-in, outline-color 0.2s ease, transform 0.8s ease;
    }

  }


  span:not(.given) {
    background-color: var(--lightestShade);
    
    border-bottom: 0.075em solid var(--darkestShade);
  }


  @media (hover: hover) and (pointer: fine) {

    span:not(.given):hover {
      background-color: var(--lighterShade);
      border-color: var(--emphasisColor);
    }
    span.given:hover {
      color: #777;
    }
    
    span:not(.given).noticed {
      background-color: var(--lighterShade);
      border-color: var(--emphasisColor);
    }

    span.given.noticed {
      color: #777;
    }
    
  }
  span.given {
    cursor: default;

    .ripple {
      display: none;
    }
  }

  span:not(.given):focus {
    background: var(--focusColor);
    border-color: var(--emphasisColor);
  }

  span > p {
    margin: 0;
    padding: 0;
    position: relative;
    margin-top: 0.1em;
    overflow: hidden;
    pointer-events: none; /* Don't interfere with ripple */

    transition: background 0.4s;
    will-change: bottom, opacity;

    border-top-left-radius: 20px;
    border-top-right-radius: 20px;

    z-index: 5;

    width:  clamp(1rem, calc(9vh * var(--fontFactor)), calc(4rem * var(--fontFactor)));
    
    &.insert {
      animation: fade 0.16s cubic-bezier(.35,1,1,1) forwards;
    }
    &.dismiss {
      animation: fade 0.12s cubic-bezier(.65,-0.4,0,0) forwards reverse;
    }
  }

  span ul {
    list-style-type: none;
    display: flex;
    font-size: calc(var(--cellFontSize) / 3);
    flex-direction: column;
    height: 100%;
    padding: 0;
    width: 80%;
    height: 88%;
    pointer-events: none;
    flex-wrap: wrap;
    position: absolute;
    gap: 2px;
    margin: 0;
    margin-top: 0.1em;
    justify-content: center;
    

    li {
      transform: 0;
      transition: transform 0.2s;
      @starting-style {
        transform: translateY(170%);
      }
      &.dismiss {
        transition: transform 0.05s;
        transform: translateY(500%);
      }
    }
  }
}

#grid.correct {
  span {
    transition: background-color .2s ease-in, border .2s, outline-color 0.2s ease;
    pointer-events: none;
    cursor: default;
    background-color: transparent;
    outline-color: transparent;
    border-color: transparent;
    animation: correctFlash 0.75s forwards;
    animation-delay: 400ms;
  }
  
}

@keyframes fade {
  from { bottom: 12px; opacity: 0; }
  to { bottom: 0px; opacity: 1; }
}

@keyframes correctFlash {
  0% { transform: scale(1); color: var(--baseColor); }
  50% { transform: scale(1.65); color: var(--correctColor); }
  100% { transform: scale(1.25); color: var(--correctColor); }
}

#prop_container {
  width: 300px; /* Limit the visible width */
  height: 200px; /* Limit the visible height */
  overflow: visible;
  scrollbar-width: none;
  scrollbar-color: transparent transparent;
  position: relative;
  display: block;
  align-content: center;
  z-index: 1;
}


#propositions {
  position: relative;
  
  transition: translate 0.25s;
  
  font-size: clamp(1.5rem, 4vh, 2rem);

  cursor: default;

  display: inline-block;
  flex-direction: column;
  justify-content: flex-start;

  margin: auto;
  padding: 0;

  color: var(--baseColor);
  text-align: center;
  list-style-type: none; /* no bullet points */

  overflow: visible;


  transition: width 0.1s;
  li {
    width: 100%;
    white-space: nowrap;
    padding: 0.1em;

    &:has(+ li)::after {
      content: '';
      display: block;
      width: 100%;
      border-bottom: 1px solid var(--baseColor);
      position: relative;
      top: 0.1em;
    }

    span.entry {
      cursor: pointer;
      padding-top: 4px;
      display: inline-block;
      position: relative;
      .mspace { margin-right: 0 !important; }
      + span {margin-left: 0.18em; }
    }
    span.entry::before {
      content: "";
      display: block;
      transform: scale(0.94);
      opacity: 0;
      border-radius: 5px;
      position: absolute;
      left: 0; right: 0; top: 0; bottom: 0;
      transition: opacity 0.12s ease-in-out;
      background-color: var(--focusColor);
      box-shadow: 0 2px 1px -1px var(--lighterShade);
      border: 1px solid var(--darkShade);

      z-index: -1;
    }
    span.entry.correct {
      cursor: default;
    }

    span.entry.given::before {
      filter: saturate(0);
    }

    @media (hover: hover) and (pointer: fine) {

      span.entry:not(.correct, .highlight):hover::before,
      span.entry:not(.correct, .highlight).noticed::before {
        opacity: 0.5;
      }

    }

    span.entry.highlight::before {
      opacity: 1;
    }
  }
}


#prop_container::-webkit-scrollbar,
#domain::-webkit-scrollbar {
  display: none;
}


#wrap_grid_domain {
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: calc(var(--maxGridWidth) + var(--axisFontSize));
  
}

#wrap_toolbar_domain {
  display: flex;
  flex-direction: column;
  gap: 2px;
  margin-top: -25px;
  align-items: center;
  width: var(--maxGridWidth);
}

#toolbar {
  display: flex;
  width: 90vw;
  flex-basis: 100%;

  #pencil, #undo, #redo {
    cursor: pointer;
    background-color: transparent;
    border: 0;
    box-shadow: none;
    filter: drop-shadow(0px 1px 1px rgba(0, 0, 0, 0.1)) var(--hueShiftIcons, );
    border-radius: 50px;
    padding: 0;
  }
  #pencil {
    margin-right: auto;
    width:35px;
    height: 35px;
    transform: scale(0.9);
  }

  #pencil::after {
    content: "";
    background-image:url("../assets/PENCIL.svg");
    opacity: 0.45;
    transition: opacity 0.15s, filter 0.1s;
    background-size: 100% 100%;
    display: inline-block;
    height: 100%;
    width: 100%;
    position: relative;
    z-index: 2;
  }

  #undo, #redo {
    width: 32px;
    height: 32px;
  }

  #undo::after, #redo::after {
    content: "";
    transition: opacity 0.15s, filter 0.15s;
    background-size: 100% 100%;
    display: inline-block;
    height: 100%;
    width: 24px;
    height: 24px;

    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);

    z-index: 2;
  }
  #undo::after {
    background-image:url("../assets/UNDO.svg");
  }
  #redo::after {
    background-image:url("../assets/REDO.svg");
  }

  @media (hover: hover) and (pointer: fine) {
    #pencil.usable:hover::after, #undo.usable:hover::after, #redo.usable:hover::after {
      opacity: 1;
    }

  }

  #pencil.active::after {
    opacity: 1;
    filter: drop-shadow( 4px 4px 1.5px rgba(0, 0, 0, .3));
  }

  #undo:not(.usable), #redo:not(.usable), #pencil:not(.usable) {
    cursor: default;
    pointer-events: none;
    &::after {
      opacity: 0.35;
    }
  }

  #undo.usable::after, #redo.usable::after {
    opacity: 0.6;
  }
}

#domain {
  padding: 0;
  display: flex;
  overflow-x: visible;
  scrollbar-width: none;
  scrollbar-color: transparent transparent;
  align-items: center;
  position: relative;
  transition: opacity 1s;
  height: var(--domainButtonHeight);


  padding-top: calc(0.15 * var(--domainButtonHeight)); /* account for button visuals being 85% */


  button {
    width: 100%;
    min-width: max(40px, 8vh);
    height: 60px;
    position: relative;
    font-family: "computer modern serif";
    font-size: clamp(1.5rem, 5.3vh, 3.25rem);
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    z-index: 0;
    border: none;
    background: transparent;
    padding: 0;




    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 85%;
      border-radius: 11px;
      background: linear-gradient(
        to left,
        var(--darkerShade) 0%,
        var(--darkShade) 8%,
        var(--darkShade) 92%,
        var(--darkerShade) 100%
      );

      filter: saturate(0.4) brightness(0.72);
      transition: filter 0.2s;
    }


    p {
      margin: 0;
      position: relative;
      z-index: 0;


      height: 85%;
      width: 100%;
      overflow: hidden;
      border: 1px solid var(--darkestShade);
      box-sizing: border-box;
      
      border-radius: 11px;
      color: var(--baseColor);


      display: flex;
      align-items: center;
      justify-content: center;
      
      pointer-events: none;

      background-color: var(--lightestShade);
      will-change: bottom;
      bottom: 8px;
      transition: bottom 0.07s ease-out, background 0.1s;
    }
  }


  @media (hover: hover) and (pointer: fine) {
    button:hover p {
      bottom: 9px;
      background-color: var(--lighterShade);
    }
  }
  button:not(.pushed):focus p {
    transition: bottom 0.125s cubic-bezier(.3, .7, .4, 1.25), background 0.4s;


    background: var(--focusColor);
    bottom: 6px;


    zoom: 0.99;
  }


  button:focus::before {
    filter: brightness(0.75);
  }
  button.pushed p {
    transition: bottom 0.125s cubic-bezier(.3, .7, .4, 1.25), background 0.4s;


    bottom: 6px;


    zoom: 0.99;
  }


}

.ripple {
  background: var(--focusColor);
  width: 3px;
  height: 3px;
  border-radius: 100%;
  opacity: 1;
  position: absolute;
  transition: transform 0.4s cubic-bezier(.38,.23,.69,1.02);
  pointer-events: none;
  will-change: transform;
  z-index: -1;
}

.ripple.run {
  transform: scale(170);
}

/* For ripple */
#grid span {
  position: relative;
  overflow: hidden;
}



/* Landscape layout */
@media (orientation: landscape) and (width > 900px), (height < 400px) {

  #wrap_main {
    gap: 2.25vw;
    width: 90%;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50.1%, -50%);
  }

  @media (height < 700px) {
    #domain button { font-size: calc(2.5rem - (700px - 100vh)/25);}
  }

  #prop_container {
    min-width: 20vw;
    width: 20vw;
    min-height: 50vh;
    max-height: 80vh;
    margin: 0;
    position: relative;
    display: flex;
    flex-direction: column;

    align-items: center;
    flex-grow: 0.5;
  }
  #propositions {
    min-width: 100%;
    bottom: 0.5em;
  }


  #wrap_toolbar_domain {
    margin-top: calc(2.25vh - clamp(40px, 7.5vh, 58px));
    gap: 0;
  }
  #toolbar {
    left: var(--axisFontSize);
    width: 100%;
    min-height: var(--domainButtonHeight);
    max-height: var(--domainButtonHeight);
    position: relative;
    top: clamp(40px, 7.5vh, 58px);

    #pencil {
      position: absolute;
      bottom: max(min(9px, calc(9px - (750px - 100vh)/12)), -8px);
      left: -43px;
      margin: 0;
    }
    #undo {
      position: absolute;

      right: -38px;
      bottom: max(min(28px, calc(28px - (750px - 100vh)/12)), 12px);
    }
    #redo {
      position: absolute;

      right: -38px;
      bottom: max(min(-4px, calc(-4px - (750px - 100vh)/12)), -17px);
    }
  }
  #domain {
    left: var(--axisFontSize);
    width: 100%;
    gap: 5px;
  }

}


/* Portrait layout */
@media (orientation: portrait) and (height > 400px), (width < 900px) and (height > 400px) {

  #wrap_main {
    margin-top: -1px;
    flex-direction: column;
    align-content: center;
    align-items: center;
  }

  #prop_container {
    height: 32.75vh; /* REDUCED WHEN <4 PROPOSITIONS */
    width: 85vw;
    margin: 0;
    margin-bottom: 1vh;
    align-self: center;
    text-align: center;
  }
  #propositions {
    min-width: 85vw;
  }

  
  #wrap_toolbar_domain {
    position: relative;
    top: 10px;
    width: 100%;
  }
  @media (height > 700px) {
    #wrap_grid_domain {
      gap: calc((100vh - 700px) / 6);
    }
  }

  @media (width < 420px) {
    /*
       #wrap_toolbar_domain {
       top: calc(10px + (420px - 100vw) / 1.5);
       }
       #wrap_axis_grid {
       top: calc((420px - 100vw) / 5);
       }
     */
  }

  #domain {
    width: 90vw;
    flex-direction: row;
    flex-basis: 100%;
    gap: 5px;
  }

  
  #wrap_axis_grid {
    right: var(--gridOffset);
    height: calc(var(--maxGridWidth) + var(--axisFontSize));
  }
}

